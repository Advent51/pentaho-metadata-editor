<project name="Pentaho Metadata Editor" default="dist" xmlns:ivy="antlib:org.apache.ivy.ant">

  <description>
	      Pentaho Metadata Editor build file.
    </description>

  <tstamp prefix="start" />

  <!-- system properties to use -->
  <property file="override.properties" />
  <property file="build.properties" />
  <property file="build-res/version.properties" />
  <property name="cr" value="${line.separator}" />

  <!-- set global properties for this build -->
  <property name="launcher" location="launcher" />
  <property name="libext" location="libext" />
  <property name="libswt" location="libswt" />
  <property name="stage.dir" location="stage" />
  <property name="docs" location="docs" />
  <property name="jdbc" location="jdbc" />
  <property name="simple-jndi" location="simple-jndi" />
  <property name="samples" location="samples" />
  <property name="driver-lib.dir" location="${libext}/JDBC" />

  <property name="productId" value="pme" />
  <property name="releaseType" value="ce" />
  <property name="package.basename" value="${productId}-${releaseType}-${project.revision}" />
  
  <property name="javadoc.zip.filename"
  			value="${package.basename}-javadoc.zip"/>
  <property name="javadoc.tar.filename"
  			value="${package.basename}-javadoc.tar.gz"/>
  <property name="source.zip.filename"
  			value="${package.basename}-sources.zip"/>
  <property name="source.tar.filename"
  			value="${package.basename}-sources.tar.gz"/>
  <property name="javadoc.packagenames"
	        value="org.pentaho.*"/>
	
  <property name="package.resdir" value="${basedir}/package-res" />
	
	<!-- Plugin resolve dir -->
	<property name="resolve-plugins.dir" value="plugins" />

  <!-- Define the default location of the common build file -->
  <property name="common.build.file"
            value="./build-res/subfloor.xml"
            description="This is the location of the standardized build-res/subfloor.xml file" />

  <!-- Import the build-res/subfloor.xml file which contains all the default tasks -->
  <import file="${common.build.file}" />
  
  <target name="clean-all" depends="clean-stage,clean,clean-jars" />

  <path id="cp-meta">
    <fileset dir="${libext}" includes="**/*.jar" />
    <fileset dir="${libswt}" includes="*.jar" />
    <fileset dir="${libswt}/win32/" includes="*.jar" />
  </path>

  <target name="clean-stage">
    <delete dir="${stage.dir}" />
    <delete dir="${resolve-plugins.dir}" />
  </target>

  <!-- override compile.compile to include custom classpath and do resource copying -->
  <target name="compile.compile" depends="init">
    <javac destdir="${classes.dir}"
           debug="${javac.debug}"
           deprecation="${javac.deprecation}"
           fork="true"
           source="${javac.source}"
           target="${javac.target}"
    	encoding="iso-8859-1">
      <classpath>
        <path refid="classpath" />
        <path refid="cp-meta" />
      </classpath>
      <src path="${src.dir}" />
    </javac>

    <!-- a better approach is to move these resources to a "res" directory which will include them automatically in the dist -->
    <echo>Copying images etc to classes directory...</echo>
    <copy todir="${classes.dir}">
      <fileset dir="${src.dir}" includes="**/*.gif **/*.png **/*.xml **/*properties" />
    </copy>
  </target>

  <!-- override javadoc target to include custom classpath -->
  <target name="javadoc" depends="javadoc.init, compile">
    <javadoc destdir="${javadoc.dir}/docs/api"
             access="public"
             source="1.5"
             use="true"
             notree="false"
             nonavbar="false"
             noindex="false"
             splitindex="true"
             author="true"
             version="true"
             maxmemory="256M"
             nodeprecatedlist="false"
             nodeprecated="false"
             packagenames="${javadoc.packagenames}"
             sourcepath="${src.dir}"
             doctitle="${impl.title} documentation">
      <link href="http://java.sun.com/j2se/1.5.0/docs/api/" />
      <classpath refid="classpath" />
      <classpath refid="cp-meta" />
    </javadoc>
  </target>
	
  <!-- Resolve all default items plus JDBC drivers -->
  <target name="resolve" depends="resolve-drivers,resolve-plugins,subfloor.resolve"/>
  
  <!-- Resolve JDBC Drivers into libext/JDBC -->
  <target name="resolve-drivers" depends="resolve-init" description="Retrieves runtime configuration dependencies">
      <ivy:resolve file="${ivy.artifact.ivyfilename}" conf="default"/>
      <ivy:retrieve conf="drivers" pattern="${driver-lib.dir}/[module]-[revision](-[classifier]).[ext]"/>
  </target>

  <!-- Resolve plugin configuration into ${resolve-plugins.dir} -->
  <target name="resolve-plugins" depends="install-ivy">
    <ivy:resolve file="${ivyfile}" conf="plugin" />
    <ivy:retrieve conf="plugin" pattern="${resolve-plugins.dir}/[module]-[revision](-[classifier]).[ext]" />
  </target>

  <target name="assemble" depends="jar,-init-assemble,-stage-dist-lib,-stage-pentaho-libs" description="copy jar file to distribution directory">
    <copy todir="${stage.dir}">
      <fileset dir="." includes="releasenotes.txt" excludes="**/build, **/dist" />
    </copy>
    
    <copy todir="${stage.dir}" overwrite="true">
      <fileset dir="${package.resdir}" />
    </copy>
    
    <!-- external libs (jdbc etc) -->
    <mkdir dir="${stage.dir}" />
    <copy todir="${stage.dir}/libext">
      <fileset dir="${libext}" includes="**/*.jar **/*.zip" excludes="**/.vpn" />
    </copy>

    <!-- Move the hive-jdbc driver into the appropriate directory.  It is resolved with the default
         config so transitives end up in libext -->
    <copy todir="${stage.dir}/libext/JDBC">
      <fileset dir="${lib.dir}" includes="**/*hive-jdbc*.jar" />
    </copy>

  	<!-- Install Kettle plugins -->
  	<property name="stage.plugins.dir" value="${stage.dir}/plugins" />
  	<mkdir dir="${stage.plugins.dir}" />
  	<unzip dest="${stage.plugins.dir}" overwrite="true">
        <fileset file="${resolve-plugins.dir}/*.zip" />
  	</unzip>
    
    <!-- swt libs (jdbc etc) -->
    <mkdir dir="${stage.dir}/libswt" />
    <copy todir="${stage.dir}/libswt">
      <fileset dir="${libswt}" includes="**/*" excludes="**/.vpn **/sapjco*.dll" />
    </copy>

    <!--  launcher libs -->
    <mkdir dir="${stage.dir}/launcher" />
    <copy todir="${stage.dir}/launcher" >
      <fileset dir="${launcher}" includes="**/*" />
    </copy>
    
    <!-- documentation -->
    <!--
		<mkdir dir="${stage.dir}/docs" />

		<copy todir="${stage.dir}/docs">
			<fileset dir="${docs}" includes="**/*.pdf **/*.htm **/*.html **/*.png **/*.PNG **/*.swf **/cn_ZN.zip" excludes="**/*.dot **/*.doc **/*.sxw **/*.odt **/*.vpn **/*feature list*" />
		</copy>
		-->
  </target>

  <target name="-init-assemble">
    <echo>Construct the distribution package...</echo>

    <!-- root directory -->
    <mkdir dir="${stage.dir}" />
  </target>

  <target name="-stage-dist-lib">
    <!-- base lib -->
    <mkdir dir="${stage.dir}/lib" />
    <copy todir="${stage.dir}/lib" file="${dist.dir}/${ivy.artifact.id}-${project.revision}.jar" />
  </target>
  
  <target name="-stage-pentaho-libs">
    <!-- pentaho libs -->
    <mkdir dir="${stage.dir}/libext" />
    <copy todir="${stage.dir}/libext/pentaho">
      <fileset dir="${lib.dir}" includes="**/*.jar" excludes="**/*hive-jdbc*" />
    </copy>
  </target>

  <target name="package-zip">
    <zip destfile="${dist.dir}/${package.basename}.zip">
      <zipfileset dir="${stage.dir}" prefix="metadata-editor" filemode="755">
        <include name="**/*.sh" />
        <include name="**/JavaApplicationStub" />
      </zipfileset>
      <zipfileset dir="${stage.dir}" prefix="metadata-editor">
        <include name="**/*" />
        <exclude name="**/*.sh" />
        <exclude name="**/JavaApplicationStub" />
        <exclude name="**/Thumbs.db" />
      </zipfileset>
    </zip>
  </target>

  <target name="package" depends="assemble,package-zip" />
  
  <!-- override dist target so it does assembly and packaging as well -->
  <target name="dist" depends="jar, package" />

</project>
