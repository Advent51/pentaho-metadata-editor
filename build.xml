<project name="Pentaho Metadata Editor" default="dist">

  <description>
	      Pentaho Metadata Editor build file.
    </description>

  <tstamp prefix="start" />

  <!-- system properties to use -->
  <property file="override.properties" />
  <property file="build.properties" />
  <property file="build-res/version.properties" />
  <property name="cr" value="${line.separator}" />

  <!-- set global properties for this build -->

  <property name="libext" location="libext" />
  <property name="libswt" location="libswt" />
  <property name="stage.dir" location="stage" />
  <property name="docs" location="docs" />
  <property name="jdbc" location="jdbc" />
  <property name="simple-jndi" location="simple-jndi" />
  <property name="samples" location="samples" />

  <property name="productId" value="pme" />
  <property name="releaseType" value="ce" />
  <property name="package.basename" value="${productId}-${releaseType}-${project.revision}" />
  
  <property name="javadoc.zip.filename"
  			value="${package.basename}-javadoc.zip"/>
  <property name="javadoc.tar.filename"
  			value="${package.basename}-javadoc.tar.gz"/>
  <property name="source.zip.filename"
  			value="${package.basename}-sources.zip"/>
  <property name="source.tar.filename"
  			value="${package.basename}-sources.tar.gz"/>
  
  <property name="package.resdir" value="${basedir}/package-res" />

  <!-- Define the default location of the common build file -->
  <property name="common.build.file"
            value="./common_build.xml"
            description="This is the location of the standardized common_build.xml file" />

  <!-- Import the common_build.xml file which contains all the default tasks -->
  <import file="${common.build.file}" />
  
  <target name="clean-all" depends="clean-stage,clean,clean-jars" />

  <path id="cp-meta">
    <fileset dir="${libext}" includes="**/*.jar" />
    <fileset dir="${libswt}" includes="*.jar" />
    <fileset dir="${libswt}/win32/" includes="*.jar" />
  </path>

  <target name="clean-stage">
    <delete dir="${stage.dir}" />
  </target>

  <!-- override compile.compile to include custom classpath and do resource copying -->
  <target name="compile.compile" depends="init">
    <javac destdir="${classes.dir}"
           debug="${javac.debug}"
           deprecation="${javac.deprecation}"
           fork="true"
           source="${javac.source}"
           target="${javac.target}">
      <classpath>
        <path refid="classpath" />
        <path refid="cp-meta" />
      </classpath>
      <src path="${src.dir}" />
    </javac>

    <!-- a better approach is to move these resources to a "res" directory which will include them automatically in the dist -->
    <echo>Copying images etc to classes directory...</echo>
    <copy todir="${classes.dir}">
      <fileset dir="${src.dir}" includes="**/*.gif **/*.png **/*.xml **/*properties" />
    </copy>
  </target>

  <!-- override javadoc target to include custom classpath -->
  <target name="javadoc" depends="javadoc.init, compile">
    <javadoc destdir="${javadoc.dir}/docs/api"
             access="public"
             source="1.5"
             use="true"
             notree="false"
             nonavbar="false"
             noindex="false"
             splitindex="true"
             author="true"
             version="true"
             maxmemory="256M"
             nodeprecatedlist="false"
             nodeprecated="false"
             packagenames="${javadoc.packagenames}"
             sourcepath="${src.dir}"
             doctitle="${impl.title} documentation">
      <link href="http://java.sun.com/j2se/1.5.0/docs/api/" />
      <classpath refid="classpath" />
      <classpath refid="cp-meta" />
    </javadoc>
  </target>

  <target name="assemble" depends="jar" description="copy jar file to distribution directory">
    <echo>Construct the distribution package...</echo>

    <!-- root directory -->
    <mkdir dir="${stage.dir}" />

    <copy todir="${stage.dir}">
      <fileset dir="." includes="releasenotes.txt" excludes="**/build, **/dist" />
    </copy>
    
    <copy todir="${stage.dir}" overwrite="true">
      <fileset dir="${package.resdir}" />
    </copy>

    <!-- base lib -->
    <mkdir dir="${stage.dir}/lib" />
    <copy todir="${stage.dir}/lib" file="${dist.dir}/${ivy.artifact.id}-${project.revision}.jar" />

    <!-- pentaho libs -->
    <mkdir dir="${stage.dir}/libext" />
    <copy todir="${stage.dir}/libext/pentaho">
      <fileset dir="${lib.dir}" includes="**/*.jar" />
    </copy>
    
    <!-- external libs (jdbc etc) -->
    <mkdir dir="${stage.dir}/libext" />
    <copy todir="${stage.dir}/libext">
      <fileset dir="${libext}" includes="**/*.jar **/*.zip" excludes="**/.vpn" />
    </copy>

    <!-- swt libs (jdbc etc) -->
    <mkdir dir="${stage.dir}/libswt" />
    <copy todir="${stage.dir}/libswt">
      <fileset dir="${libswt}" includes="**/*" excludes="**/.vpn **/sapjco*.dll" />
    </copy>

    <!-- documentation -->
    <!--
		<mkdir dir="${stage.dir}/docs" />

		<copy todir="${stage.dir}/docs">
			<fileset dir="${docs}" includes="**/*.pdf **/*.htm **/*.html **/*.png **/*.PNG **/*.swf **/cn_ZN.zip" excludes="**/*.dot **/*.doc **/*.sxw **/*.odt **/*.vpn **/*feature list*" />
		</copy>
		-->
  </target>

  <target name="package-zip">
    <zip destfile="${dist.dir}/${package.basename}.zip">
      <zipfileset dir="${stage.dir}" prefix="metadata-editor" includes="**/*" excludes="**/Thumbs.db" />
    </zip>
  </target>

  <target name="package-targz">
    <tar destfile="${dist.dir}/${package.basename}.tar.gz" compression="gzip">
      <tarfileset dir="${stage.dir}" prefix="metadata-editor" mode="755">
        <include name="**/*.sh" />
      </tarfileset>
      <tarfileset dir="${stage.dir}" prefix="metadata-editor">
        <include name="**/*" />
        <exclude name="**/*.sh" />
      </tarfileset>
    </tar>
  </target>

  <!--
	  NOTE: This task should be called before the "dist" task is called. Once PDI-1861 is resolved,
	  then this task can be removed
	
  <target name="rescopy" description="Copies the resources - this is a temporary fix related to PMD-438">
    <mkdir dir="${stage.dir}" />
    <copy todir="${stage.dir}" overwrite="true">
      <fileset dir="${basedir}/res" />
    </copy>
  </target>-->
  <!--
	  END PDI-1861 workaround
	-->

  <target name="package" depends="assemble,package-zip,package-targz" />
  
  <!-- override dist target so it does assembly and packaging as well -->
  <target name="dist" depends="jar, package" />

</project>