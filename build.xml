<project name="Pentaho Metadata Editor" default="dist">

	<description>
	      Pentaho Metadata Editor build file.
    </description>

	<tstamp prefix="start" />

	<!-- system properties to use -->
	<property file="override.properties" />
	<property file="build.properties" />
	<property file="src/build-res/version.properties" />
	<property name="cr" value="${line.separator}" />
	
	<!-- set global properties for this build -->

	<property name="src" location="src" />
	<property name="classes" location="${build.classes.dir}" />
	<property name="bin" location="bin" />
	<property name="lib" location="lib" />
	<property name="libext" location="libext" />
	<property name="libswt" location="libswt" />
	<property name="distrib" location="distrib" />
	<property name="docs" location="docs" />
	<property name="jdbc" location="jdbc" />
	<property name="simple-jndi" location="simple-jndi" />
	<property name="samples" location="samples" />
	<property name="api" location="${docs}/api" />

	<property name="sourcezipfile" location="PentahoMetaDataEditor-src-${release.number}.zip" />

	<!-- Define the default location of the common build file -->
	<property name="common.build.file" value="./common_build.xml" 
		description="This is the location of the standardized common_build.xml file"/>
	
	<!-- Import the common_build.xml file which contains all the default tasks -->
	<import file="${common.build.file}"/>
	
	<target name="clean-all" depends="clean-build, clean-jars, clean-dist, clean-javadoc, clean-distrib" />

	<target name="clean-build">
		<delete dir="${build.dir}" />
	</target>

	<target name="clean-dist">
		<delete dir="${dist.dir}" />
	</target>
	
	<target name="clean-distrib">
		<delete dir="${distrib}" />
	</target>

	<target name="clean-javadoc">
		<delete dir="${build.javadoc.dir}" />
	</target>
	
	<target name="init-classes">
		<mkdir dir="${build.classes.dir}" />
	</target>
	
	<target name="init" depends="init-build, init-dist, init-classes" />
	
	<target name="init-build">
		<mkdir dir="${build.dir}" />
	</target>

	<target name="init-dist">
		<mkdir dir="${dist.dir}" />
	</target>

	<target name="init-javadoc">
		<mkdir dir="${build.javadoc.dir}" />
	</target>

	<target name="compile" description="compile the source " depends="init-classes">
		<echo>Compiling Pentaho Metadata Editor...</echo>
		<javac srcdir="${src}" destdir="${build.classes.dir}" target="1.5" source="1.5" deprecation="true" debug="true">
			<!-- exclude the example from the distribution -->
			<classpath id="cp-meta">
				<fileset dir="${libext}" includes="**/*.jar" />
				<fileset dir="${libswt}" includes="*.jar" />
				<fileset dir="${libswt}/win32/" includes="*.jar" />
			</classpath>
		</javac>
		
		<echo>Copying images etc to classes directory...</echo>
		<copy todir="${build.classes.dir}">
			<fileset dir="${src}" includes="**/*.gif **/*.png **/*.xml **/*properties" />
		</copy>
	</target>

	<target name="zip-javadoc" depends="init-javadoc, compile" description="compile the javadoc api">
		<echo>Compiling the Pentaho Metadata Editor API javadocs...</echo>
		
		<javadoc destdir="${build.javadoc.dir}/docs/api" access="public" source="1.5" use="true" notree="false" nonavbar="false" noindex="false" splitindex="true" author="true" version="true" maxmemory="256M" nodeprecatedlist="false" nodeprecated="false" packagenames="org.pentaho.pms.*" sourcepath="${src}" doctitle="Pentaho Metadata Editor API documentation">
			<link href="http://java.sun.com/j2se/1.4.2/docs/api/" />
			<classpath refid="cp-meta" />
		</javadoc>
		<jar jarfile="${dist.dir}/PentahoMetaDataEditor-javadoc-${release.number}.zip" basedir="${build.javadoc.dir}" includes="**/*" excludes="**/Thumbs.db" />
	</target>

	<target name="jar" depends="init-dist, compile" description="generate the Pentaho Metadata Editor library pentaho-meta-editor.jar">
		<echo>Generating the Pentaho Metadata library pentaho-meta.jar ...</echo>
		<jar jarfile="${dist.dir}/pentaho-meta-editor-${impl.version}.jar" basedir="${build.classes.dir}" includes="**/*" excludes="**/Thumbs.db">
			<manifest>
				<attribute name="Implementation-Title" value="${impl.title}" />
				<attribute name="Implementation-Version" value="${impl.version}" />
				<attribute name="Implementation-Vendor" value="${impl.vendor}" />
			</manifest>
		</jar>
	</target>

	<target name="distrib" depends="jar" description="copy jar file to distribution directory">
		<echo>Construct the distribution package...</echo>

		<!-- root directory -->
		<mkdir dir="${distrib}" />

		<copy todir="${distrib}">
			<fileset dir="." includes="releasenotes.txt" excludes="**/build, **/dist"/>
		</copy>

		<copy todir="${distrib}">
			<fileset dir="${bin}" includes="**/*" excludes="**/.vpn .project .classpath" />
		</copy>

		<!-- base lib -->
		<mkdir dir="${distrib}/lib" />
		<copy todir="${distrib}/lib" file="${dist.dir}/pentaho-meta-editor-${impl.version}.jar" />

		<!-- jdbc settings-->
		<mkdir dir="${distrib}/jdbc" />
		<copy todir="${distrib}/jdbc">
			<fileset dir="${jdbc}" includes="*.*" excludes="**/.vpn" />
		</copy>

		<!-- jdbc settings-->
		<mkdir dir="${distrib}/simple-jndi" />
		<copy todir="${distrib}/simple-jndi">
			<fileset dir="${simple-jndi}" includes="*.*" excludes="**/.vpn" />
		</copy>
		
		<!-- samples settings-->
		<mkdir dir="${distrib}/samples" />
		<copy todir="${distrib}/samples">
			<fileset dir="${samples}" includes="*.*" />
		</copy>

		<!-- external libs (jdbc etc) -->
		<mkdir dir="${distrib}/libext" />
		<copy todir="${distrib}/libext">
			<fileset dir="${libext}" includes="**/*.jar **/*.zip" excludes="**/.vpn" />
		</copy>

		<!-- swt libs (jdbc etc) -->
		<mkdir dir="${distrib}/libswt" />
		<copy todir="${distrib}/libswt">
			<fileset dir="${libswt}" includes="**/*" excludes="**/.vpn **/sapjco*.dll" />
		</copy>

		<!-- documentation -->
		<!--
		<mkdir dir="${distrib}/docs" />

		<copy todir="${distrib}/docs">
			<fileset dir="${docs}" includes="**/*.pdf **/*.htm **/*.html **/*.png **/*.PNG **/*.swf **/cn_ZN.zip" excludes="**/*.dot **/*.doc **/*.sxw **/*.odt **/*.vpn **/*feature list*" />
		</copy>
		-->
		<echo>Generating the Pentaho Metadata Editor distribution package PentahoMetaDataEditor-${release.number}.zip ...</echo>
		<zip destfile="${dist.dir}/pme-ce-${project.revision}.zip">
			<zipfileset dir="${distrib}" prefix="metadata-editor" includes="**/*" excludes="**/Thumbs.db" />
		</zip>
		
		<tar destfile="${dist.dir}/pme-ce-${project.revision}.tar">
			<tarfileset dir="${distrib}" prefix="metadata-editor" mode="755">
				<include name="**/*.sh"/>
			</tarfileset>
			<tarfileset dir="${distrib}" prefix="metadata-editor">
				<include name="**/*" />
				<exclude name="**/*.bat"/>
				<exclude name="**/*.sh" />
			</tarfileset>
		</tar>
		
		<gzip src="${dist.dir}/pme-ce-${project.revision}.tar" zipfile="${dist.dir}/pme-ce-${project.revision}.tar.gz"/>
	</target>

	<target name="zip-src" depends="init-dist" description="generate the PentahoMetaDataEditor-src-${release.number}.zip file">
		<echo>Generating the Pentaho Metadata Editor source packge zip file (PentahoMetaDataEditor-src-${release.number}.zip) ...</echo>
		<zip destfile="${dist.dir}/pentaho-metadata-editor-src-${release.number}.zip">
			<zipfileset dir="src" prefix="pentaho-metadata-editor-src-${release.number}" />
		</zip>
	</target>
	
	<!--
	  NOTE: This task should be called before the "dist" task is called. Once PDI-1861 is resolved,
	  then this task can be removed
	-->
	<target name="rescopy" description="Copies the resources - this is a temporary fix related to PMD-438">
		<mkdir dir="${distrib}" />
		<copy todir="${distrib}"  overwrite="true" >
			<fileset dir="${basedir}/res"/>
		</copy>
	</target>
	<!--
	  END PDI-1861 workaround
	-->

	<target name="dist" depends="resolve, jar, zip-src, zip-javadoc, distrib" />
	
    <!-- =========================================================== 
          target: ftp-metadata
              
          Sends files to an ftp site. You can disable
          the ftp actions by setting the ftp.metadata.false property.
          
          You must set a number of properties in an override properties
          file in order for this to work.                
         =========================================================== -->
    <target name="ftp" unless="ftp.metadata.false">
		<ftp action="mkdir" server="${ftp.server}" remotedir="${ftp.remote.dir}" userid="${ftp.user}" password="${ftp.user.passwd}"/>

		<ftp server="${ftp.server}" remotedir="${ftp.remote.dir}" userid="${ftp.user}" password="${ftp.user.passwd}">
			<fileset dir="${ftp.source.dir}">
				<exclude name="*.tar"/>
			</fileset>
		</ftp>

		<mail mailhost="${ftp.mailhost}" mailport="${ftp.mailport}" subject="${ftp.mail.subject}" messagemimetype="text/html" charset="us-ascii" tolist="${distribution.list}">
			<from address="${ftp.mail.from.address}"/>
			<replyto address="${ftp.mail.replyto.address}"/>
		</mail>	
    </target>

</project>
